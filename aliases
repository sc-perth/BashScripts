#/bin/bash!

################################################################################
### From file:///home/perth/bashScripts/LCP_Password_Manager/LCPpassword_Generic.sh

# ERR
# Send error message to stderr
# Usage:
#	ERR code_segment_identifier - error message
#	eg: ERR Vaild_IPv4 - quartet is out of range
function ERR { echo "!!! ERROR : $@" 1>&2; }


# Valid_IPv4
# Test an IPv4 address for validity
# Usage:
#      Valid_IPv4 IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if Valid_IPv4 IP_ADDRESS; then echo good; else echo bad; fi
#
# Source: http://www.linuxjournal.com/content/validating-ip-address-bash-script
# Jun 26, 2008, Mitch Frazier
function Valid_IPv4 {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}


# Get_New_Pass
# Infinately try to get 2 identical strings;
# When successful store the string in global variable refrenced by argument (see usage)
# Returns 0 on success and 1 on failure
# Usage:
#	var=0
#	i=Get_New_Pass var # NOTE: the argument is a STRING identical to the NAME OF the GLOBAL variable you want the password stored in
#	if [ $? -eq 0 ]; then echo $var
function Get_New_Pass {
	if [ -z "$1" ]; then						# IF no argument
		return 1						# THEN fail
	fi
	while [ 1 ]; do							# Infinate loop
		read -s -p "Enter new password: " pass1 		# Prompt user for password, get password (but don't show it)
		echo ""
		read -s -p "Re-Enter new password: " pass2
		echo ""
		if [[ "$pass1" == "$pass2" ]]; then			# IF input strings are identical
			eval $1=${pass1}				# STORE string in global variable whose
			return 0					#	name was provided as an argument
		else							#	of type string
			echo -e "\nPasswords do not match, try again..."
		fi
	done
}

################################################################################
##################### USER DEFINED ALIASES BEGIN HERE ##########################

alias emerge='sudo echo SUDO SUCCESS! && time sudo emerge'
alias startvnc='x11vnc -forever -usepw -display :0'
alias lsa='ls -Ahl --group-directories-first'
alias lst='ls -laht | grep """`date "+%b %d"`"""'
alias die='sudo shutdown -h now'
alias lassh='ssh -l user -o "UserKnownHostsFile /dev/null"'
alias fixGPGagent='killall ssh-agent gpg-agent > /dev/null >&2; eval $(gpg-agent --daemon)'
alias not-commented="egrep -v '^(#.*|\s?)$' "

# Provides access to logtail function
source ~/bashScripts/logtail.sh

function aliass {
	printf "### %s\n" "$(date)" >> ~/bashScripts/aliases
		printf "alias %s\n" "$@" >> ~/bashScripts/aliases
		source ~/.bashrc
}

function lsd {
	OLD=$GREP_COLORS
		GREP_COLORS="sl=0;44"

		ls -la | grep -e ^d.\*\$ #| egrep --color=always -e ^.\*[[:space:]][^.]\*\$

		GREP_COLORS=$OLD
}

function sddsleep {
	while [ 1 ]; do
		sudo hdparm -Y /dev/sdd
			sleep 60
			done
}

function monSize {
	if [ $# -eq 0 ]; then
		echo "monSize: FATAL: no target" 1>&2
			echo "Usage: monSize <sudo> targetDirectory"
			return 1

			elif [[ "$1" == "sudo" || "$1" == "Sudo" ]]; then
			if [[ -a "$2" ]]; then
				while [ 1 ]; do
					sudo du -chs "$2"
						sleep 10
						done
			else
				echo "monSize: FATAL: invalid target" 1>&2
					return 1
					fi
					elif [[ -a "$1" ]]; then
					while [ 1 ]; do
						du -chs "$1"
							sleep 10
							done
	else
		echo "monSize: FATAL: invalid target" 1>&2
			return 1
			fi
}

function contains {
	local n=$#
		local value=${!n}
	for ((i=1;i < $#;i++)) {
		if [ "${!i}" == "${value}" ]; then
			return 0
				fi
	}
	return 1
}


function parseFileForUniqueIPs {
	if [[ -f "$1" && -r "$1" ]]; then
		declare -a outIParr
			while read -a line; do
				local iter=0
					local count=${#line[@]}
	while [ $iter -lt $count ]; do
		Valid_IPv4 ${line[$iter]}
	if [[ $? -eq 0 ]]; then
		contains "${outIParr[@]}" "${line[$iter]}"
			if [[ $? -eq 1 ]]; then
				outIParr[${#outIParr[@]}]=${line[$iter]}
	fi
		fi
		let iter+=1
		done
#echo ${outIParr[@]}
#if [[ ${#outIParr[@]} -gt 20 ]]; then
#	echo ${outIParr[@]}
#	unset outIParr
#	declare -a outIParr
#fi
		done < "$1"
		echo ${outIParr[@]}
	fi
}

function fix-gpg-agent {
	killall ssh-agent gpg-agent
	unset GPG_AGENT_INFO SSH_AUTH_SOCK SSH_AGENT_PID
	eval "$(gpg-agent --daemon --enable-ssh-support)"
}

function sshWhenUp {
	while [[ "$(nmap -p 22 $1 | grep -o '1 host up')" != "1 host up" ]]; do
		printf '%s\n' sleeping
		sleep 10
	done
	ssh $1
}

function setPassReducedCharSet() {
	local default='!@#$%&*^_-+'
	local special=${1:-$default}

	local lower="$(echo {a..z} | sed 's/ //g')"
	local upper="$(echo {A..Z} | sed 's/ //g')"
	local num="$(echo {0..9} | sed 's/ //g')"
	export PASSWORD_STORE_CHARACTER_SET="$(echo ${lower}${upper}${num}${special} | grep -o . | sort | tr -d '\n')"
}

##################### USER DEFINED ALIASES  END  HERE ##########################
################################################################################
####################### aliases added by "aliass"  #############################

### Sat Jun 15 18:43:40 EDT 2013
alias minecraft='java -Xmx1024M -Xms512M -cp ~/Downloads/minecraft.jar net.minecraft.LauncherFrame'
### Mon Jul 8 18:51:49 EDT 2013
alias plasma_restart='kbuildsycoca4 && kstart plasma-desktop'
### Mon Sep 2 06:56:54 EDT 2013
alias remount='sudo mount /dev/sde2 /EtA/ && sudo mount /dev/sde3 /linstore/ && sudo mount /dev/sdf1 /Media/'
### Mon Sep 2 06:58:39 EDT 2013
alias demount='sudo umount /EtA/ && sudo umount /linstore/ && sudo umount /Media/'
